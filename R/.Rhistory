n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
n_per_month
n=99
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
n_per_month
sum(n_per_month)
n=7
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
n_per_month
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^2 * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
n_per_month
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^3 * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
n_per_month
n=40
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
w
n_per_month
enroll_time <- rep(NA, n)
runif(n_per_month[1], min=0, max=1)
enroll_time[1:n_per_month[1]] = runif(n_per_month[1], min=0, max=1)
cumsum(n_per_month)
sum(n_per_month[1:(j-1)])+1
n_per_month[1:j]
?runif
enroll_time <- rep(NA, n)
enroll_time[1:n_per_month[1]] = runif(n_per_month[1], min=0, max=1)
if(duration>1){
for (j in 2:duration){
LL = sum(n_per_month[1:(j-1)])+1
UU = sum(n_per_month[1:j])
enroll_time[LL:UU] = runif(n_per_month[j], min=0, max=1) + (j - 1)
}
}
enroll_time
simu_single_arm <- function(n = 100, duration = 5, hazard = 0.1, dropout = 0, w = 1){
## Simulate survival time
surv_time <- rexp(n = n, rate = hazard)
cen_time <- rexp(n = n, rate = max(dropout, 1e-10))
## Simulate enrollment
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
enroll_time <- rep(NA, n)
enroll_time[1:n_per_month[1]] = runif(n_per_month[1], min=0, max=1)
if(duration>1){
for (j in 2:duration){
LL = sum(n_per_month[1:(j-1)])+1
UU = sum(n_per_month[1:j])
enroll_time[LL:UU] = runif(n_per_month[j], min=0, max=1) + (j - 1)
}
}
## Combine the data
d <- data.frame(enterTime = enroll_time, surv_time = surv_time, cen_time = cen_time) %>%
mutate(survTime = ifelse(surv_time<=cen_time, surv_time, cen_time)) %>%
mutate(calendarTime = .data$enterTime + .data$survTime) %>%
mutate(event = ifelse(surv_time<=cen_time, 1, 0)) %>%
dplyr::select(-surv_time, -cen_time)
return(d)
}
d <- simu_single_arm(n = 20, duration = 5)
View(d)
simu_single_arm <- function(n = 100, duration = 5, hazard = 0.1, dropout = 0, w = 1){
## Simulate survival time
surv_time <- rexp(n = n, rate = hazard)
cen_time <- rexp(n = n, rate = max(dropout, 1e-10))
## Simulate enrollment
duration <- round(duration)
if(duration<=1){
n_per_month <- n
}else{
n_per_month <- rep(NA, duration) # number of pts per month
tmp <- 0
for (i in 1:duration) {
#ith month: cumulative #pts
cN0i <- max(round((i/duration)^w * n), 1)
n_per_month[i] <- max(cN0i - tmp, 1)
tmp = cN0i
}
n_per_month[duration] = n - sum(n_per_month[1:(duration-1)])
}
enroll_time <- rep(NA, n)
enroll_time[1:n_per_month[1]] = runif(n_per_month[1], min=0, max=1)
if(duration>1){
for (j in 2:duration){
LL = sum(n_per_month[1:(j-1)])+1
UU = sum(n_per_month[1:j])
enroll_time[LL:UU] = runif(n_per_month[j], min=0, max=1) + (j - 1)
}
}
## Combine the data
d <- data.frame(enterTime = enroll_time, surv_time = surv_time, cen_time = cen_time) %>%
mutate(survTime = ifelse(surv_time<=cen_time, surv_time, cen_time)) %>%
mutate(event = ifelse(surv_time<=cen_time, 1, 0)) %>%
mutate(calendarTime = .data$enterTime + .data$survTime) %>%
dplyr::select(-surv_time, -cen_time)
return(d)
}
d <- simu_single_arm(n = 20, duration = 5)
n = 100; prop_S = 0.5; ratio = 1; duration = 5;
hazard_S = c(0.1, 0.07); hazard_Sc = c(0.11, 0.088),
n = 100; prop_S = 0.5; ratio = 1; duration = 5;
hazard_S = c(0.1, 0.07); hazard_Sc = c(0.11, 0.088);
dropout_S = c(0, 0); dropout_Sc = c(0, 0); w = 1
nS <- n*prop_S
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- nS*r
nS_con <- nS - nS_trt
nSc_trt <- nSc*r
nSc_con <- nSc - nSc_trt
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w)
View(dS_con)
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0)
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .after = enterTime )
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = enterTime )
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = enterTime)
View(dS_trt)
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
View(dS_con)
View(dS_trt)
View(d)
table(d$subgroup)
table(d$trt)
simu_enrich_trial <- function(n = 100, prop_S = 0.5, ratio = 1, duration = 5,
hazard_S = c(0.1, 0.07), hazard_Sc = c(0.11, 0.088),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1){
## preparation
nS <- n*prop_S
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- nS*r
nS_con <- nS - nS_trt
nSc_trt <- nSc*r
nSc_con <- nSc - nSc_trt
## simulate for S and control
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
return(d)
}
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
d <- simu_enrich_trial(n = 100, prop_S = 0.6, ratio = 1)
table(d$subgroup)
d <- simu_enrich_trial(n = 100, prop_S = 0.6, ratio = 3)
table(d$subgroup)
table(d$trt)
d <- simu_enrich_trial(n = 500, prop_S = 0.7, ratio = 1)
library(survival)
?coxph
View(d)
coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
coxph(Surv(survTime, event) ~ trt, d)
d <- simu_enrich_trial(n = 500, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14))
coxph(Surv(survTime, event) ~ trt, d)
coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 5000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14))
coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 5000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 5000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 5000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 50000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.2, 0.14));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
coxph(Surv(survTime, event) ~ trt, d)
d <- simu_enrich_trial(n = 50000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.1), hazard_Sc = c(0.1, 0.1));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 50000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.1, 0.1));coxph(Surv(survTime, event) ~ trt + strata(subgroup), d)
d <- simu_enrich_trial(n = 50000, prop_S = 0.7, ratio = 1, hazard_S = c(0.1, 0.07), hazard_Sc = c(0.1, 0.1));coxph(Surv(survTime, event) ~ trt, d)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
dat=d
View(dat)
targetEvents_S = c(40, 80)
test.method="dunnett"
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
View(dIA)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 10)
dat<-d
d <- dat
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 10)
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 20)
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
targetEvents_S = c(32, 80)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 20)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 10)
targetEvents_S = c(28, 70)
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
View(dIA)
targetEvents_S[1]
nph::logrank.test
aggregate
?aggregate
?survival::survdiff
survival::survdiff
survdiff(Surv(time, status) ~ pat.karno + strata(inst), data=lung)
gg<-survdiff(Surv(time, status) ~ pat.karno + strata(inst), data=lung)
gg$obs
gg$exp
survdiff(Surv(time, status) ~ pat.karno, data=lung)
survdiff(Surv(futime, fustat) ~ rx,data=ovarian)
survdiff(Surv(survTime, event) ~ trt,data=d)
survdiff(Surv(survTime, event) ~ trt+strata(subgroup),data=d)
gg$exp
gg$exp[2]
gg
gg<-survdiff(Surv(survTime, event) ~ trt+strata(subgroup),data=d)
gg$obs
gg<-survdiff(Surv(survTime, event) ~ trt,data=d)
gg$obs
gg$exp
gg<-survdiff(Surv(survTime, event) ~ trt+strata(subgroup),data=d)
gg$exp
gg$obs
gg
Strata
?strata
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
dcut <- cut_by_event(d, 10)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1)
dcut <- cut_by_event(d, 40)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1, duration = 10)
dcut <- cut_by_event(d, 40)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1, duration = 10)
dcut <- cut_by_event(d, 30)
d <- simu_enrich_trial(n = 100, prop_S = 0.5, ratio = 1, duration = 20)
dcut <- cut_by_event(d, 30)
rep(c(0,1), each = 4)
rep(c(0,1), 4)
n = 100
time = c(rexp(n, rate=log(2)/12), rexp(n, rate=log(2)/12*1.2))
event = c(as.numeric(runif(n) > 0.7), as.numeric(runif(n) > 0.7))
group = c(rep(0, n), rep(1, n))
STRATA = rep(c(0,1), n)
event
n = 100
time = c(rexp(n, rate=log(2)/12), rexp(n, rate=log(2)/12*1.2))
event = rep(1, n*2)
group = c(rep(0, n), rep(1, n))
STRATA = rep(c(0,1), n)
STRATA=NULL
lr.test = survdiff(Surv(time, event) ~ group + strata(STRATA))
n <- 100
time <- c(rexp(n, rate=log(2)/12), rexp(n, rate=log(2)/12*1.2))
event <- rep(1, n*2)
group <- c(rep(0, n), rep(1, n))
STRATA <- rep(c(0,1), n)
lr.test <- survdiff(Surv(time, event) ~ group + strata(STRATA))
lr.test
lr.test$obs
names(lr.test)
lr.test$exp
apply(lr.test$obs, 1, sum)
apply(lr.test$exp, 1, sum)
?apply
STRATA <- rep(1,n*2)
lr.test <- survdiff(Surv(time, event) ~ group + strata(STRATA))
lr.test$obs
lr.test$exp
is.matrix(lr.test$obs)
?is.matrix
if (is.matrix(lr.test$obs)) {
otmp <- apply(lr.test$obs, 1, sum)
etmp <- apply(lr.test$exp, 1, sum)
} else {
otmp <- lr.test$obs
etmp <- lr.test$exp
}
otmp
etmp
as.numeric(otmp[2] < etmp[2])
lr.test$chisq
better = as.numeric(otmp[2] < etmp[2])
sign = 2*better - 1
z = sqrt(lr.test$chisq) * sign
z
1-pnorm(z)
time <- c(rexp(n, rate=log(2)/12), rexp(n, rate=log(2)/12*1.2))
event <- rep(1, n*2)
group <- c(rep(0, n), rep(1, n))
STRATA <- rep(c(0,1), n)
lr.test <- survdiff(Surv(time, event) ~ group + strata(STRATA))
lr.test$z
lr.test$chisq
sqrt(lr.test$chisq)
if (is.matrix(lr.test$obs)) {
otmp <- apply(lr.test$obs, 1, sum)
etmp <- apply(lr.test$exp, 1, sum)
} else {
otmp <- lr.test$obs
etmp <- lr.test$exp
}
better <- as.numeric(otmp[2] < etmp[2])
sign <- 2*better - 1
z <- sqrt(lr.test$chisq) * sign
z
lr.test <- survdiff(Surv(time, event) ~ group)
#convert to z value in correct direction: z>0 means better experimental arm.
if (is.matrix(lr.test$obs)) {
otmp <- apply(lr.test$obs, 1, sum)
etmp <- apply(lr.test$exp, 1, sum)
} else {
otmp <- lr.test$obs
etmp <- lr.test$exp
}
better <- as.numeric(otmp[2] < etmp[2])
sign <- 2*better - 1
z <- sqrt(lr.test$chisq) * sign
z
lr.test
1-pnorm(z)
logrank.one.sided <- function(time, event, group, STRATA=NULL){
if(is.null(STRATA)){
lr.test <- survdiff(Surv(time, event) ~ group)
}else{
lr.test <- survdiff(Surv(time, event) ~ group + strata(STRATA))
}
#convert to z value in correct direction: z>0 means better experimental arm.
if (is.matrix(lr.test$obs)) {
otmp <- apply(lr.test$obs, 1, sum)
etmp <- apply(lr.test$exp, 1, sum)
} else {
otmp <- lr.test$obs
etmp <- lr.test$exp
}
better <- as.numeric(otmp[2] < etmp[2])
sign <- 2*better - 1
z <- sqrt(lr.test$chisq) * sign
return(list(z = z, p = 1-pnorm(z)))
}
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 10)
targetEvents_S = c(28, 70)
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
res <- nph::logrank.test(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
res$test$z
res <- logrank.one.sided(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), STRATA = NULL)
res$z
res$p
res <- nph::logrank.test(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
res$test$p
d <- simu_enrich_trial(n = 100, prop_S = 0.5, duration = 10, hazard_S = c(0.1, 0.2), hazard_Sc = c(0.11, 0.2))
# cut data at IA
dIA <- cut_by_event(d, targetEvents = targetEvents_S[1])
logrank.one.sided(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), STRATA = NULL)
res <- nph::logrank.test(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
res$test
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
d <- simu_enrich_trial(n = 200, prop_S = 0.5, duration = 10)
targetEvents_S = c(28, 70)
dS <- dat %>% filter(.data$subgroup==1)
dat <- d
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
# cut data at IA
dS_IA <- cut_by_event(dS, targetEvents = targetEvents_S[1])
IA_time <- dS_IA$calendarCutoff[1]
IA_time
dS <- dat %>% filter(.data$subgroup==1)
dSc <- dat %>% filter(.data$subgroup==0)
dF <- dat
dF_IA <- cut_by_date(dF, cut_time = IA_time)
res <- logrank.one.sided(time = dIA$survTimeCut, event = dIA$eventCut,
group = as.factor(dIA$trt), STRATA = NULL)
zS_IA <- res$z # non-adjusted Z statistic
res$z
dS_IA <- cut_by_event(dS, targetEvents = targetEvents_S[1])
IA_time <- dS_IA$calendarCutoff[1]
res <- logrank.one.sided(time = dS_IA$survTimeCut, event = dS_IA$eventCut,
group = dS_IA$trt, STRATA = NULL)
zS_IA <- res$z # non-adjusted Z statistic
zS_IA
res <- logrank.one.sided(time = dF_IA$survTimeCut, event = dF_IA$eventCut,
group = dF_IA$trt, STRATA = dF_IA$subgroup)
zF_IA <- res$z # non-adjusted Z statistic
zF_IA
