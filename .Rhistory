(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
(dSpower <- thresholds$GSD.reject.S) # power for S if S is primary
(dFpower <- thresholds$GSD.reject.F) # power for F if F is primary
HRs <- cbind(hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2))
results <- matrix(NA, nrow = 7, ncol = 8)
colnames(results) <- c("Reject.SF", "Reject.S", "Reject.F", "Primary.SF",
"Primary.S", "Primary.F", "samplesize", "Futile.Sc")
designs <- c(rep("AED", 2), rep("GSD", 3), rep("AED2", 2))
multiplicity <- c(c("dunnett", "simes"), "ht", c("dunnett", "simes"), c("dunnett", "simes"))
outputs <- data.frame()
res.list <- list()
for(i in 1:nrow(HRs)){
hrS <- HRs[i,1]
hrSc <- HRs[i,2]
res <- getOC_par(ncore=nclust, seed = seed, nsim = nsim_per_cluster, n = nF, prop_S = pr,
duration = accrual_duration, targetEvents.S = targetEvents_S,
HR.Sc.threshold = HR.Sc.threshold, HR.S.threshold = HR.S.threshold,
HR.F.threshold = HR.F.threshold, hazard_S = log(2)/c(medS_con, medS_con/hrS),
hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc), dropout_S = c(0, 0),
dropout_Sc = c(0, 0), w = 1, ratio = 1, alpha = alpha)
res.list[[i]] <- res
# reject S or F.
results[,1] <- sapply(res, function(x) mean(apply(x[,1:2], 1, any)))
# reject S
results[,2] <- sapply(res, function(x) mean(x[,1]))
# reject F
results[,3] <- sapply(res, function(x) mean(x[,2]))
# selecting dual primary
results[,4] <- sapply(res, function(x) mean(x[,3] & x[,4]))
# selecting S primary
results[,5] <- sapply(res, function(x) mean(x[,3] & !x[,4]))
# selecting F primary
results[,6] <- sapply(res, function(x) mean(!x[,3] & x[,4]))
# sample size
results[,7] <- sapply(res, function(x) mean(x[,5]))
# Sc futility rate
results[,8] <- sapply(res, function(x) mean(x[,6]))
ddd <- as.data.frame(results) %>%
mutate(designs = designs, multiplicity = multiplicity, .before = 1) %>%
mutate(scenario = i, .before = 1) %>%
mutate(hrS = hrS, hrSc = hrSc, .after = scenario)
if(i==1){
outputs <- ddd
}else{
outputs <- bind_rows(outputs, ddd)
}
}
seed = seed; nsim = nsim_per_cluster; n = nF; prop_S = pr;
duration = accrual_duration; targetEvents.S = targetEvents_S;
HR.Sc.threshold = HR.Sc.threshold; HR.S.threshold = HR.S.threshold,
seed = seed; nsim = nsim_per_cluster; n = nF; prop_S = pr;
duration = accrual_duration; targetEvents.S = targetEvents_S;
HR.Sc.threshold = HR.Sc.threshold; HR.S.threshold = HR.S.threshold;
HR.F.threshold = HR.F.threshold; hazard_S = log(2)/c(medS_con, medS_con/hrS);
hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc); dropout_S = c(0, 0);
dropout_Sc = c(0, 0); w = 1; ratio = 1; alpha = alpha
## Start simulation
set.seed(seed)
AED.simes <- matrix(NA, nrow = nsim, ncol = 6)
colnames(AED.simes) <- c("S.reject", "F.reject", "S.selected", "F.selected", "samplesize", "Sc.futile")
AED.dunnett <- AED2.dunnett <- AED2.simes <- AED.simes
GSD.ht <- GSD.simes <- GSD.dunnett <- AED.simes
sim=1
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
## get Z statistics
Zstats <- getZstats(dat = d, targetEvents.S = targetEvents.S)
View(d)
n
prop_S
ratio
n*prop_S
n - nS
ratio/(ratio+1)
nS
nS
simu_enrich_trial <- function(n = 100, prop_S = 0.5, ratio = 1, duration = 5,
hazard_S = c(0.1, 0.07), hazard_Sc = c(0.11, 0.088),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1){
## preparation
nS <- ceiling(n*prop_S)
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- ceiling(nS*r)
nS_con <- nS - nS_trt
nSc_trt <- ceiling(nSc*r)
nSc_con <- nSc - nSc_trt
## simulate for S and control
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = .data$enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = .data$enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = .data$enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = .data$enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
return(d)
}
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
## get Z statistics
Zstats <- getZstats(dat = d, targetEvents.S = targetEvents.S)
table(d$trt)
simu_enrich_trial <- function(n = 100, prop_S = 0.5, ratio = 1, duration = 5,
hazard_S = c(0.1, 0.07), hazard_Sc = c(0.11, 0.088),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1){
## preparation
nS <- round(n*prop_S)
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- round(nS*r)
nS_con <- nS - nS_trt
nSc_trt <- round(nSc*r)
nSc_con <- nSc - nSc_trt
## simulate for S and control
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = .data$enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = .data$enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = .data$enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = .data$enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
return(d)
}
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
table(d$trt)
table(d$subgroup)
n*prop_S
ceiling(n*prop_S/2)*2
nS <- ceiling(n*prop_S/2)*2
nSc <- n - nS
r <- ratio/(ratio+1)
nS <- ceiling(n*prop_S/2)*2
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- round(nS*r)
nS_con <- nS - nS_trt
nSc_trt <- round(nSc*r)
nSc_con <- nSc - nSc_trt
nS_trt
nS_con
simu_enrich_trial <- function(n = 100, prop_S = 0.5, ratio = 1, duration = 5,
hazard_S = c(0.1, 0.07), hazard_Sc = c(0.11, 0.088),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1){
## preparation
nS <- ceiling(n*prop_S/2)*2
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- round(nS*r)
nS_con <- nS - nS_trt
nSc_trt <- round(nSc*r)
nSc_con <- nSc - nSc_trt
## simulate for S and control
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = .data$enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = .data$enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = .data$enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = .data$enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
return(d)
}
table(d$subgroup)
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
table(d$subgroup)
table(d$trt)
table(d$trt, d$subgroup)
## get Z statistics
Zstats <- getZstats(dat = d, targetEvents.S = targetEvents.S)
r
round(1.5)
round(3.5)
round(2.5)
simu_enrich_trial <- function(n = 100, prop_S = 0.5, ratio = 1, duration = 5,
hazard_S = c(0.1, 0.07), hazard_Sc = c(0.11, 0.088),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), w = 1){
## preparation
nS <- round(n*prop_S)
nSc <- n - nS
r <- ratio/(ratio+1)
nS_trt <- round(nS*r)
nS_con <- nS - nS_trt
nSc_trt <- round(nSc*r)
nSc_con <- nSc - nSc_trt
## simulate for S and control
dS_con <- simu_single_arm(n = nS_con, duration = duration, hazard = hazard_S[1],
dropout = dropout_S[1], w = w) %>%
mutate(subgroup = 1, trt = 0, .before = .data$enterTime)
## simulate for S and trt
dS_trt <- simu_single_arm(n = nS_trt, duration = duration, hazard = hazard_S[2],
dropout = dropout_S[2], w = w) %>%
mutate(subgroup = 1, trt = 1, .before = .data$enterTime)
## simulate for Sc and control
dSc_con <- simu_single_arm(n = nSc_con, duration = duration, hazard = hazard_Sc[1],
dropout = dropout_Sc[1], w = w) %>%
mutate(subgroup = 0, trt = 0, .before = .data$enterTime)
## simulate for Sc and trt
dSc_trt <- simu_single_arm(n = nSc_trt, duration = duration, hazard = hazard_Sc[2],
dropout = dropout_Sc[2], w = w) %>%
mutate(subgroup = 0, trt = 1, .before = .data$enterTime)
## Combine the data
d <- bind_rows(dS_con, dS_trt, dSc_con, dSc_trt)
return(d)
}
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
table(d$trt, d$subgroup)
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = 852, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
table(d$trt, d$subgroup)
## get Z statistics
Zstats <- getZstats(dat = d, targetEvents.S = targetEvents.S)
## Simulate survival times and tumor responses
d <- simu_enrich_trial(n = n, prop_S = prop_S, ratio = ratio, duration = duration,
hazard_S = hazard_S, hazard_Sc = hazard_Sc,
dropout_S = dropout_S, dropout_Sc = dropout_Sc, w = w)
dat <- d
targetEvents.S
Zstats <- getZstats(dat = d, targetEvents.S = round(targetEvents.S))
seed <- 202409
nclust <- 10
nsim_per_cluster <- 1000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.4
nS <- 425
nF <- 425/pr
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- round( c(nS*maturity*IF, nS*maturity)) )
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
(dSpower <- thresholds$GSD.reject.S) # power for S if S is primary
(dFpower <- thresholds$GSD.reject.F) # power for F if F is primary
HRs <- cbind(hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2))
results <- matrix(NA, nrow = 7, ncol = 8)
colnames(results) <- c("Reject.SF", "Reject.S", "Reject.F", "Primary.SF",
"Primary.S", "Primary.F", "samplesize", "Futile.Sc")
designs <- c(rep("AED", 2), rep("GSD", 3), rep("AED2", 2))
multiplicity <- c(c("dunnett", "simes"), "ht", c("dunnett", "simes"), c("dunnett", "simes"))
outputs <- data.frame()
res.list <- list()
for(i in 1:nrow(HRs)){
hrS <- HRs[i,1]
hrSc <- HRs[i,2]
res <- getOC_par(ncore=nclust, seed = seed, nsim = nsim_per_cluster, n = nF, prop_S = pr,
duration = accrual_duration, targetEvents.S = targetEvents_S,
HR.Sc.threshold = HR.Sc.threshold, HR.S.threshold = HR.S.threshold,
HR.F.threshold = HR.F.threshold, hazard_S = log(2)/c(medS_con, medS_con/hrS),
hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc), dropout_S = c(0, 0),
dropout_Sc = c(0, 0), w = 1, ratio = 1, alpha = alpha)
res.list[[i]] <- res
# reject S or F.
results[,1] <- sapply(res, function(x) mean(apply(x[,1:2], 1, any)))
# reject S
results[,2] <- sapply(res, function(x) mean(x[,1]))
# reject F
results[,3] <- sapply(res, function(x) mean(x[,2]))
# selecting dual primary
results[,4] <- sapply(res, function(x) mean(x[,3] & x[,4]))
# selecting S primary
results[,5] <- sapply(res, function(x) mean(x[,3] & !x[,4]))
# selecting F primary
results[,6] <- sapply(res, function(x) mean(!x[,3] & x[,4]))
# sample size
results[,7] <- sapply(res, function(x) mean(x[,5]))
# Sc futility rate
results[,8] <- sapply(res, function(x) mean(x[,6]))
ddd <- as.data.frame(results) %>%
mutate(designs = designs, multiplicity = multiplicity, .before = 1) %>%
mutate(scenario = i, .before = 1) %>%
mutate(hrS = hrS, hrSc = hrSc, .after = scenario)
if(i==1){
outputs <- ddd
}else{
outputs <- bind_rows(outputs, ddd)
}
}
seed <- 202409
nclust <- 10
nsim_per_cluster <- 1000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.4
nS <- 425
nF <- 425/pr
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- c(nS*maturity*IF, nS*maturity) )
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
(dSpower <- thresholds$GSD.reject.S) # power for S if S is primary
(dFpower <- thresholds$GSD.reject.F) # power for F if F is primary
nsim_per_cluster <- 10
HRs <- cbind(hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2))
results <- matrix(NA, nrow = 7, ncol = 8)
colnames(results) <- c("Reject.SF", "Reject.S", "Reject.F", "Primary.SF",
"Primary.S", "Primary.F", "samplesize", "Futile.Sc")
designs <- c(rep("AED", 2), rep("GSD", 3), rep("AED2", 2))
multiplicity <- c(c("dunnett", "simes"), "ht", c("dunnett", "simes"), c("dunnett", "simes"))
outputs <- data.frame()
res.list <- list()
for(i in 1:nrow(HRs)){
hrS <- HRs[i,1]
hrSc <- HRs[i,2]
res <- getOC_par(ncore=nclust, seed = seed, nsim = nsim_per_cluster, n = nF, prop_S = pr,
duration = accrual_duration, targetEvents.S = targetEvents_S,
HR.Sc.threshold = HR.Sc.threshold, HR.S.threshold = HR.S.threshold,
HR.F.threshold = HR.F.threshold, hazard_S = log(2)/c(medS_con, medS_con/hrS),
hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc), dropout_S = c(0, 0),
dropout_Sc = c(0, 0), w = 1, ratio = 1, alpha = alpha)
res.list[[i]] <- res
# reject S or F.
results[,1] <- sapply(res, function(x) mean(apply(x[,1:2], 1, any)))
# reject S
results[,2] <- sapply(res, function(x) mean(x[,1]))
# reject F
results[,3] <- sapply(res, function(x) mean(x[,2]))
# selecting dual primary
results[,4] <- sapply(res, function(x) mean(x[,3] & x[,4]))
# selecting S primary
results[,5] <- sapply(res, function(x) mean(x[,3] & !x[,4]))
# selecting F primary
results[,6] <- sapply(res, function(x) mean(!x[,3] & x[,4]))
# sample size
results[,7] <- sapply(res, function(x) mean(x[,5]))
# Sc futility rate
results[,8] <- sapply(res, function(x) mean(x[,6]))
ddd <- as.data.frame(results) %>%
mutate(designs = designs, multiplicity = multiplicity, .before = 1) %>%
mutate(scenario = i, .before = 1) %>%
mutate(hrS = hrS, hrSc = hrSc, .after = scenario)
if(i==1){
outputs <- ddd
}else{
outputs <- bind_rows(outputs, ddd)
}
}
library(enrichDesign)
knitr::opts_chunk$set(echo = TRUE, cache = FALSE)
rm(list=ls())
#library(devtools)
# devtools::install_github("wonderzhm/enrichDesign")
library(knitr)
library(gsDesign)
library(dplyr)
library(rpact)
library(ggplot2)
library(ggh4x)
library(ggpubr)
library(scales)
library(parallel)
library(doParallel)
library(enrichDesign)
seed <- 202409
nclust <- 10
nsim_per_cluster <- 1000 # set at least 1000 for final report
pr <- 0.5
alpha <- 0.025
medS_con <- 10
medSc_con <- 9
accrual_duration <- 20
IF <- 0.4
nS <- 425
nF <- 425/pr
nSc <- nF - nS
hrS <- 0.7
hrSc <- 0.85
maturity <- 0.7
(targetEvents_S <- c(nS*maturity*IF, nS*maturity) )
(hrF <- exp(pr*log(hrS)+(1-pr)*log(hrSc))) # HR for F
# find the thresholds
thresholds <- getDesignParameters(
n = nF, prop_S = pr, duration = accrual_duration, targetEvents.S = targetEvents_S,
CP.Sc.threshold = 0.2, CP.S.threshold = 0.8, CP.F.threshold = 0.8,
hazard_S = log(2)/c(medS_con, medS_con/hrS), hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc),
dropout_S = c(0, 0), dropout_Sc = c(0, 0), ratio = 1, alpha = alpha)
(HR.S.threshold <- thresholds$HR.S.threshold)
(HR.F.threshold <- thresholds$HR.F.threshold)
(HR.Sc.threshold <- thresholds$HR.Sc.threshold)
(dSpower <- thresholds$GSD.reject.S) # power for S if S is primary
(dFpower <- thresholds$GSD.reject.F) # power for F if F is primary
nsim_per_cluster<-10
HRs <- cbind(hrS  = c(1, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7),
hrSc = c(1, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2))
results <- matrix(NA, nrow = 7, ncol = 8)
colnames(results) <- c("Reject.SF", "Reject.S", "Reject.F", "Primary.SF",
"Primary.S", "Primary.F", "samplesize", "Futile.Sc")
designs <- c(rep("AED", 2), rep("GSD", 3), rep("AED2", 2))
multiplicity <- c(c("dunnett", "simes"), "ht", c("dunnett", "simes"), c("dunnett", "simes"))
outputs <- data.frame()
res.list <- list()
for(i in 1:nrow(HRs)){
hrS <- HRs[i,1]
hrSc <- HRs[i,2]
res <- getOC_par(ncore=nclust, seed = seed, nsim = nsim_per_cluster, n = nF, prop_S = pr,
duration = accrual_duration, targetEvents.S = targetEvents_S,
HR.Sc.threshold = HR.Sc.threshold, HR.S.threshold = HR.S.threshold,
HR.F.threshold = HR.F.threshold, hazard_S = log(2)/c(medS_con, medS_con/hrS),
hazard_Sc = log(2)/c(medSc_con, medSc_con/hrSc), dropout_S = c(0, 0),
dropout_Sc = c(0, 0), w = 1, ratio = 1, alpha = alpha)
res.list[[i]] <- res
# reject S or F.
results[,1] <- sapply(res, function(x) mean(apply(x[,1:2], 1, any)))
# reject S
results[,2] <- sapply(res, function(x) mean(x[,1]))
# reject F
results[,3] <- sapply(res, function(x) mean(x[,2]))
# selecting dual primary
results[,4] <- sapply(res, function(x) mean(x[,3] & x[,4]))
# selecting S primary
results[,5] <- sapply(res, function(x) mean(x[,3] & !x[,4]))
# selecting F primary
results[,6] <- sapply(res, function(x) mean(!x[,3] & x[,4]))
# sample size
results[,7] <- sapply(res, function(x) mean(x[,5]))
# Sc futility rate
results[,8] <- sapply(res, function(x) mean(x[,6]))
ddd <- as.data.frame(results) %>%
mutate(designs = designs, multiplicity = multiplicity, .before = 1) %>%
mutate(scenario = i, .before = 1) %>%
mutate(hrS = hrS, hrSc = hrSc, .after = scenario)
if(i==1){
outputs <- ddd
}else{
outputs <- bind_rows(outputs, ddd)
}
}
res.pr50 <- res.list
(power.pr50 <- outputs)
#save.image("results.RData")
